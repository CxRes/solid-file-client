#!/usr/bin/env node
const fc  = require('./src/index.js');
const t   = require('./src/dispatch.js');
/*
 * YOU MUST ENTER THE FOLLOWING DATA
 *     your IDP, e.g. 'https://solid.community'
 *     your username at the IDP e.g. "jeffz"
 *     your password
 *     URL of a base directory where files can be written and deleted
 */
const cfg = getConfig({
    idp  : '', 
    user : '',
    pass : '',
    base : '' 
});
t.dispatch( [
    "Testing solid-file-client ... logging in ...",
    function(){
        fc.login(cfg.credentials).then( session =>{
            t.ok("login")
        }, err => { console.log("Test aborted : "+err); process.exit(-1); });
    },
    function(){
        fc.deleteFolder(cfg.newFolder).then( res =>{
            fc.createFolder(cfg.newFolder).then( res =>{
                t.ok("create folder");
            }, err => t.fail(err) );
        }, err => t.fail(err) );
    },
    function(){
        fc.updateFile(cfg.newFile).then( res =>{
            t.ok("create file");
        }, err => t.fail(err) );
    },
    function(){
        fc.updateFile(cfg.newFile,cfg.newText).then( res =>{
            t.ok("update file");
        }, err => t.fail(err) );
    },
    function(){
        fc.readFile(cfg.newFile).then( body =>{
            if(body===cfg.newText) t.ok("read file")
            else t.fail("got file, but text doesn't match");
        }, err => t.fail(err) );
    },
    function(){
        fc.readFolder(cfg.newFolder).then( folder =>{
            if( folder.files.length===1 && folder.folders.length===0){
                t.ok("read folder");           
            }
            else {
                t.fail("got folder but its content is wrong");
            }
        }, err => t.fail(err) );
    },
    function(){
        fc.deleteFile(cfg.newFile).then( ()=> {
            fc.readFile(cfg.newFile).then( body =>{
               t.fail("got file that should have been deleted");
            }, err => t.ok("delete file") );
        }, err => fail(err) );
    },
    function(){
        fc.deleteFolder(cfg.newFolder).then( ()=> {
            fc.readFile(cfg.newFolder).then( body =>{
               t.fail("got folder that should have been deleted");
            }, err => t.ok("delete folder") );
        }, err => fail(err) );
    },
    function(){
        fc.checkSession().then( session => {
            if(session)  t.ok("check session");
        }, err => fail(err) );
    },
    function(){
        fc.logout().then( ()=> {
            fc.checkSession().then( session => {
                if(session) 
                  t.fail("still connected after logout")
                else t.ok("logout");
            }, err => t.fail(err) );
        }, err => fail(err) );
    },
]);    
function getConfig(opts) { return {
    newFolder   : opts.base,
    newFile     : opts.base + 'test.txt',
    newText     : 'hello new Solid world!',
    credentials : {
        idp      : opts.idp,
        username : opts.user,
        password : opts.pass
    }
};}
